<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.watch.project.repository.ReviewRepository">

<resultMap type="com.watch.project.dto.MovieReviewDTO" id="review">
    <id property="id" column="id" />
	<result property="movieId" column="movie_id"/>
	<result property="userEmail" column="user_email"/>
	<result property="reviewScore" column="review_score" />
	<result property="reviewComment" column="review_comment"/>
	<result property="reviewCommentDate" column="review_comment_date"/>
	<result property="reviewCommentLikes" column="review_comment_likes"/>
</resultMap>

<resultMap type="com.watch.project.dto.CommentLikedUsersDTO" id="comment_liked_user">
    <id property="id" column="id" />
	<result property="commentId" column="comment_id"/>
	<result property="likedUserEmail" column="liked_user_email"/>
</resultMap>

<resultMap type="com.watch.project.dto.userInfo.ReviewListDTO" id="review_list">
    <result property="id" column="id" />
	<result property="movieId" column="movie_id"/>
	<result property="userEmail" column="user_email"/>
	
	<result property="movieNm" column="movie_nm"/>
	<result property="movieNmEn" column="movie_nm_en"/>
	<result property="posterUrl" column="poster_url"/>

	<result property="reviewScore" column="review_score" />
	<result property="reviewComment" column="review_comment"/>
	<result property="reviewCommentDate" column="review_comment_date"/>
</resultMap>


	<select id="getInfoByPk" resultMap="review">
		SELECT * FROM movie_review WHERE id=#{pk}
	</select>
	
	<update id="updateScore" parameterType="com.watch.project.dto.MovieReviewDTO">
		UPDATE movie_review SET review_score =#{reviewScore} WHERE id =#{id}
	</update>
	
	<insert id="insertScore" parameterType="com.watch.project.dto.MovieReviewDTO">
		INSERT INTO movie_review (id, movie_id, user_email, review_score, review_comment) VALUES(#{id}, #{movieId}, #{userEmail}, #{reviewScore}, #{reviewComment})
	</insert>
	
	<select id="getStoredScore" resultType="Float">
		SELECT review_score FROM movie_review WHERE id=#{id}
	</select>
	
	<update id="updateForComment" parameterType="com.watch.project.dto.MovieReviewDTO">
		UPDATE movie_review SET review_comment=#{reviewComment}, review_comment_date=#{reviewCommentDate} WHERE id=#{id}
	</update>
	
	<insert id="insertForComment" parameterType="com.watch.project.dto.MovieReviewDTO">
		INSERT INTO movie_review (id, movie_id, user_email, review_score, review_comment, review_comment_date) VALUES(#{id}, #{movieId}, #{userEmail}, #{reviewScore}, #{reviewComment}, #{reviewCommentDate})
	</insert>
	
	<select id="selectComments" resultMap="review">
		SELECT * FROM movie_review WHERE movie_id=#{movieId}
	</select>
	
	<select id="getComment" resultMap="review">
		SELECT * FROM movie_review WHERE id=#{pkId}
	</select>
	
	<update id="deleteComment" parameterType="String">
		UPDATE movie_review SET review_comment='nan', review_comment_date = NULL, review_comment_likes = 0 WHERE id=#{id}
	</update>
	
	<delete id="deleteCommentLike" parameterType="String">
		DELETE FROM comment_liked_users WHERE comment_id=#{id}
	</delete>
<!-- 	<delete id="deleteFromMovieReview" parameterType="String">//////////////////////////////////////////////////////////////////// -->
<!-- 		DELTE FROM movie_review WHERE user_email=#{userEmail} -->
<!-- 	</delete> -->

	<update id="increaseLikeCountForComment" parameterType="com.watch.project.dto.MovieReviewDTO">
		UPDATE movie_review SET review_comment_likes = review_comment_likes + 1 WHERE id=#{id}
	</update>
	
	<update id="decreaseLikeCountForComment" parameterType="com.watch.project.dto.MovieReviewDTO">
		UPDATE movie_review SET review_comment_likes = review_comment_likes - 1 WHERE id=#{id}
	</update>
	
	<insert id="insertLikedUserInfo" parameterType="com.watch.project.dto.CommentLikedUsersDTO">
		INSERT INTO comment_liked_users (id, comment_id, liked_user_email) VALUES(#{id}, #{commentId}, #{likedUserEmail})
	</insert>
	
	<delete id="deleteLikedUserInfo" parameterType="com.watch.project.dto.CommentLikedUsersDTO">
		DELETE FROM comment_liked_users WHERE id=#{id}
	</delete>
	
	<select id="selectLikedComment" resultMap="comment_liked_user">
		SELECT * FROM comment_liked_users WHERE id=#{id}
	</select>
	
	<select id="selectCommentLikes" resultType="Integer">
		SELECT review_comment_likes FROM movie_review WHERE id=#{id}
	</select>
	
	<select id="getAverageRating" resultType="Float">
		SELECT AVG(review_score) FROM movie_review WHERE movie_id=#{movieId} AND NOT review_score = 0
	</select>
	
	<select id="selectReviewListByEmail" resultMap="review" >
		SELECT * FROM movie_review WHERE user_email=#{userEmail} ORDER BY review_comment_date DESC
	</select>
	
	<select id="selectCommentIdByEmail" resultType="String">
		SELECT comment_id FROM comment_liked_users WHERE liked_user_email=#{userEmail}
	</select>
	
	<select id="getMovieIdById" resultType="String">
		SELECT movie_id FROM movie_review WHERE id=#{id}
	</select>
	
	<select id="getCommentByMovieId" resultMap="review">
		SELECT * FROM movie_review WHERE movie_id=#{movieId} AND id=#{id}
	</select>
		
	<select id="getAmountOfScoredOnes" resultType="Integer">
		SELECT COUNT(*) FROM movie_review WHERE user_email =#{userEmail} AND review_score != 0
	</select>
	
	<select id="getAmountOfComments" resultType="Integer">
		SELECT COUNT(*) FROM movie_review WHERE user_email=#{userEmail} AND review_comment != 'nan'
	</select>
	
	<select id="getAmountOfLikedComments" resultType="Integer">
		SELECT COUNT(*) FROM comment_liked_users WHERE liked_user_email=#{userEmail}
	</select>
	
	<select id="chIfLikedComment" resultMap="comment_liked_user">
		SELECT * FROM comment_liked_users WHERE comment_id=#{id} AND liked_user_email=#{userEmail}
	</select>
</mapper>