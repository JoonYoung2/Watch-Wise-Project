<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.watch.project.repository.SearchRepository">
	<resultMap type="com.watch.project.dto.MovieInfoDTO" id="movieInfo">
		<result column="movie_id" property="movieId" />
		<result column="movie_nm" property="movieNm" />
		<result column="movie_nm_en" property="movieNmEn" />
		<result column="prdt_year" property="prdtYear" />
		<result column="open_dt" property="openDt" />
		<result column="type_nm" property="typeNm" />
		<result column="nations" property="nations" />
		<result column="genre_nm" property="genreNm" />
		<result column="poster_url" property="posterUrl" />
		<result column="show_time" property="showTime" />
		<result column="actors" property="actors" />
		<result column="cast" property="cast" />
		<result column="watch_grade_nm" property="watchGradeNm" />
	</resultMap>
	
	<resultMap type="com.watch.project.dto.PeopleInfoDetailDTO" id="peopleInfoDetail">
		<result column="people_id" property="peopleId"/>
		<result column="people_nm" property="peopleNm"/>
		<result column="people_nm_en" property="peopleNmEn"/>
		<result column="sex" property="sex"/>
		<result column="movie_id" property="movieId"/>
		<result column="movie_nm" property="movieNm"/>
		<result column="like_num" property="likeNum"/>
		<result column="profile_url" property="profileUrl"/>
	</resultMap>
	
	<resultMap type="com.watch.project.dto.ContentSearchingDTO" id="contentSearch">
		<result column="id" property="id"/>
		<result column="user_email" property="userEmail"/>
		<result column="content" property="content"/>
		<result column="search_date" property="searchDate"/>
		<result column="search_use" property="searchUse"/>
	</resultMap>
	
	<resultMap type="com.watch.project.dto.relatedSearch.RelatedSearchResponseDTO" id="relatedSearch">
		<result column="content" property="content"/>
		<result column="search_type" property="searchType"/>
	</resultMap>
	
	<select id="searchingStep1" resultMap="movieInfo">
		<![CDATA[SELECT * FROM movie_info 
		WHERE (movie_nm LIKE '${query}' OR movie_nm_en LIKE '${query}') 
		AND NOT genre_nm LIKE '%에로%' AND 
		rownum <= 50]]>
	</select>
	
	<select id="searchingStep2" resultMap="movieInfo">
		<![CDATA[
		SELECT * FROM movie_info 
		WHERE (movie_nm LIKE '%${query}%' OR movie_nm_en LIKE '%${query}%') 
		AND NOT genre_nm LIKE '%에로%' AND 
		ROWNUM <= 50
		UNION ALL
		SELECT * FROM movie_info
		WHERE REGEXP_LIKE(movie_nm, '^${ content }') OR REGEXP_LIKE(movie_nm_en, '^${ content }')
		AND NOT genre_nm LIKE '%에로%' AND 
		rownum <= 50
		UNION ALL
		SELECT * FROM movie_info
		WHERE REGEXP_LIKE(movie_nm, '^${ content2 }') OR REGEXP_LIKE(movie_nm_en, '^${ content2 }')
		AND NOT genre_nm LIKE '%에로%' AND 
		rownum <= 50
		]]>
	</select>
	
	<select id="searchingStep3" resultMap="peopleInfoDetail">
		<![CDATA[SELECT * FROM people_info_detail 
		WHERE people_nm LIKE '${query}' AND 
		ROWNUM <= 50 
		ORDER BY LENGTH(movie_id) DESC]]>
	</select>
	
	<select id="searchingStep4" resultMap="peopleInfoDetail">
		<![CDATA[
		SELECT * FROM(
		SELECT * FROM people_info_detail 
		WHERE people_nm LIKE '%${query}%' AND 
		ROWNUM <= 50 
		ORDER BY LENGTH(movie_id) DESC)
		UNION ALL
		
		SELECT * FROM(
		SELECT * FROM people_info_detail 
		WHERE REGEXP_LIKE(people_nm, '^${ content }') OR REGEXP_LIKE(people_nm_en, '^${ content }') AND 
		ROWNUM <= 50 
		ORDER BY LENGTH(movie_id) DESC)
		UNION ALL
		
		SELECT * FROM(
		SELECT * FROM people_info_detail 
		WHERE REGEXP_LIKE(people_nm, '^${ content2 }') OR REGEXP_LIKE(people_nm_en, '^${ content2 }') AND 
		ROWNUM <= 50
		ORDER BY LENGTH(movie_id) DESC)
		
		]]>
	</select>
	
	<select id="searchingStep20" resultMap="movieInfo">
		<![CDATA[SELECT * FROM movie_info WHERE (movie_nm LIKE '${query}' OR movie_nm_en LIKE '${query}' OR nations LIKE '${query}' OR genre_nm LIKE '${query}' OR actors LIKE '${query}' OR cast LIKE '${query}' OR prdt_year = '${query}') AND NOT genre_nm LIKE '%에로%' AND rownum <= 50]]>
	</select>
	
	<select id="searchingStep21" resultMap="movieInfo">
		<![CDATA[SELECT * FROM movie_info WHERE (movie_nm LIKE '%${query}%' OR movie_nm_en LIKE '%${query}%' OR nations LIKE '%${query}%' OR genre_nm LIKE '%${query}%' OR actors LIKE '%${query}%' OR cast LIKE '%${query}%') AND NOT genre_nm LIKE '%에로%' AND rownum <= 50]]>
	</select>
	
	<select id="getMovieInfoByMovieIds" resultMap="movieInfo">
		SELECT * FROM movie_info WHERE movie_id IN (${movieIds}) ORDER BY open_dt DESC
	</select>
	
	<select id="getPeopleIdByPeopleNmAndMovieNm" resultType="Integer" parameterType="Map">
		SELECT people_id FROM people_info_detail WHERE people_nm=#{peopleNm} AND movie_nm LIKE '%${movieNm}%'
	</select>
	
	<select id="getSearchingCheckByUserEmailAndContent" resultType="Integer">
		SELECT COUNT(id) FROM content_searching WHERE user_email=#{userEmail} AND content=#{content}
	</select>
	
	<insert id="contentInsert" parameterType="com.watch.project.dto.ContentSearchingDTO">
		<selectKey keyProperty="id" resultType="Integer" order="BEFORE">
			SELECT NVL(MAX(id), 0)+1 FROM content_searching
		</selectKey>
		INSERT INTO content_searching values(#{id}, #{userEmail}, #{content}, #{searchDate}, #{searchUse})
	</insert>
	
	<select id="recentSearchesByUserEmail" resultType="String">
		<![CDATA[SELECT content FROM 
		(SELECT * FROM content_searching WHERE user_email=#{userEmail} AND search_use = 1 ORDER BY id DESC)
		where ROWNUM <= 3]]>
	</select>
	
	<select id="popularSearches" resultType="String">
		<![CDATA[SELECT content FROM
		(SELECT content, count(content) AS count FROM 
		(SELECT * FROM content_searching WHERE search_date >= #{sixMonthAgo} ORDER BY search_date DESC) 
		GROUP BY content ORDER BY count DESC) 
		WHERE ROWNUM <= 5]]>
	</select>
	
	<update id="recentSearchesAllRemoveUpdateByUserEmail" parameterType="String">
		UPDATE content_searching SET search_use = 0 WHERE user_email=#{userEmail}
	</update>
	
	<update id="recentSearchesAddUpdateByUserEmailAndContent" parameterType="Map">
		<selectKey keyProperty="id" resultType="Integer" order="BEFORE">
			SELECT NVL(MAX(id), 0) + 1 FROM content_searching
		</selectKey>
		UPDATE content_searching SET search_use = 1, id=#{id} WHERE user_email=#{userEmail} AND content=#{content}
	</update>
	
	<select id="getRelatedSearchByContentAndUserEmail" resultMap="relatedSearch">
		<![CDATA[
		-- 사용자 연관 검색어 쿼리
		SELECT * FROM (
		SELECT content, 1 AS search_type  FROM content_searching WHERE REGEXP_LIKE(content, '^${ content }') and user_email = '${ userEmail }') 
		WHERE rownum <= 10
		UNION ALL
		
		-- 토탈 사용자 검색어 
		SELECT * FROM (
		SELECT content, 2 AS search_type  FROM content_searching WHERE REGEXP_LIKE(content, '^${ content }') and not user_email = '${ userEmail }' 
		MINUS
		SELECT content, 2 AS search_type  FROM content_searching WHERE REGEXP_LIKE(content, '^${ content }') and user_email = '${ userEmail }' 
		) WHERE rownum <= 10
		UNION ALL
		
		-- 관련 영화 연관 검색어 쿼리
		SELECT movie_nm AS content, 3 AS search_type FROM 
		(SELECT movie_nm FROM 
		(SELECT * FROM movie_info WHERE NOT genre_nm LIKE '%에로%') WHERE REGEXP_LIKE(movie_nm, '^${ content }') 
		ORDER BY like_num DESC) 
		WHERE ROWNUM <= 10
		UNION ALL
		
		-- 영어 영화 연관 검색 쿼리
		SELECT movie_nm_en AS content, 3 AS search_type FROM 
		(SELECT movie_nm_en FROM 
		(SELECT * FROM movie_info WHERE NOT genre_nm LIKE '%에로%') 
		WHERE REGEXP_LIKE(movie_nm_en, '^${ content }') ORDER BY like_num DESC) 
		WHERE ROWNUM <= 10
		UNION ALL
		
		-- 배우 연관 검색 쿼리
		SELECT people_nm AS content, 4 AS search_type FROM 
		(SELECT * FROM people_info_detail WHERE REGEXP_LIKE(people_nm, '^${ content }') ORDER BY like_num DESC) 
		WHERE ROWNUM <= 10
		]]>
	</select>
</mapper>

