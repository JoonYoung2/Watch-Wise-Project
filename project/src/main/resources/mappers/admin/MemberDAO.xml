<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.watch.project.repository.admin.AdminMemberRepository">
	<resultMap type="com.watch.project.dto.admin.MemberDTO" id="member">
		<result column="num" property="num" />
		<result column="id" property="id" />
		<result column="user_email" property="userEmail" />
		<result column="user_pw" property="userPw" />
		<result column="user_name" property="userName" />
		<result column="kakao_agreement" property="kakaoAgreement" />
		<result column="naver_agreement" property="naverAgreement" />
		<result column="google_agreement" property="googleAgreement" />
	</resultMap>
	
	<resultMap type="com.watch.project.dto.admin.BlackListDTO" id="blackList">
		<id property="id" column="id"/>
		<result property="reportedCommentId" column="reported_comment_id"/>
		<result property="reportedComment" column="reported_comment"/>
		<result property="authorEmail" column="author_email"/>
		<result property="reporterEmail" column="reporter_email"/>
		<result property="reasonForReport" column="reason_for_report"/>
		<result property="reportedDate" column="reported_date"/>
		<result property="movieNm" column="movie_nm"/>
		<result property="commentWrittenDate" column="comment_written_date"/>
		<result property="isBlack" column="is_black"/>
		<result property="movieId" column="movie_id"/>
		<result property="reviewScore" column="review_score"/>
		<result property="reportedAmount" column="reported_amount"/>
	</resultMap>
	
	<resultMap type="com.watch.project.dto.admin.ReportedCommentsDTO" id="reportedComments">
		<result property="reportedComment" column="reported_comment"/>
		<result property="movieNm" column="movie_nm"/>
		<result property="commentWrittenDate" column="comment_written_date"/>
		<result property="reviewScore" column="review_score"/>
		<result property="movieId" column="movie_id"/>
		<result property="reportedAmount" column="reported_amount"/>
	</resultMap>
	
	<resultMap type="com.watch.project.dto.admin.BlackListWaitingDTO" id="blackListWaiting">
		<result property="rowNum" column="row_num"/>
		<result property="authorEmail" column="author_email"/>
		<result property="reportedCommentAmount" column="reported_comment_amount"/>
	</resultMap>

	<resultMap type="com.watch.project.dto.admin.UserNotificationDTO" id="notify">
		<result property="recieverEmail" column="reciever_email"/>
		<result property="recieverName" column="reciever_name"/>
		<result property="senderEmail" column="sender_email"/>
		<result property="senderName" column="sender_name"/>
		<result property="notificationContent" column="notification_content"/>
		<result property="insertedDate" column="inserted_date"/>
		<result property="isSeen" column="is_seen"/>
	</resultMap>
	
	<select id="getMemberInfoListByStartAndEnd" resultMap="member">
		<![CDATA[SELECT * FROM 
		(SELECT ROWNUM AS num, ${columns}
		FROM (SELECT * FROM ${tableNm} ORDER BY ${orderByColumn} DESC))
		WHERE num >= ${start} AND num <= ${end}]]>
	</select>
	
	<select id="getMemberInfoListByStartAndEndQuery" resultMap="member">
		<![CDATA[SELECT * FROM 
		(SELECT ROWNUM AS num, ${columns}
		FROM (SELECT * FROM ${tableNm} WHERE ${conditionColumn} ORDER BY ${orderByColumn} DESC))
		WHERE num >= ${start} AND num <= ${end}]]>
	</select>	
	
	<delete id="deleteMember" parameterType="String">
		DELETE FROM member_info WHERE user_email =#{userEmail}
	</delete>
	
	<select id="checkIfExist" resultMap="blackList">
		SELECT * FROM black_list WHERE id=#{id}
	</select>
	
	<select id="getMovieNmByMovieId" resultType="String">
		SELECT movie_nm FROM movie_info WHERE movie_id=#{movieId}
	</select>
	
	<select id="getCommentDateByCommentId" resultType="String">
		SELECT review_comment_date FROM movie_review WHERE id=#{commentId}
	</select>
	
	<select id="getReviewScore" resultType="Float">
		SELECT review_score FROM movie_review WHERE id=#{commentId}
	</select>
	<insert id="saveReportDatas" parameterType="com.watch.project.dto.admin.BlackListDTO">
		INSERT INTO black_list VALUES(#{id}, #{reportedCommentId}, #{reportedComment}, #{authorEmail}, #{reporterEmail}, #{reasonForReport}, #{reportedDate}, #{movieNm}, #{commentWrittenDate}, 0, #{movieId}, #{reviewScore})
	</insert>
	
	<update id="updateReportDatas" parameterType="com.watch.project.dto.admin.BlackListDTO">
		UPDATE black_list SET reason_for_report =#{reasonForReport}, reported_date =#{reportedDate} WHERE id=#{id}
	</update>
	
	<delete id="deleteReportedDatas" parameterType="com.watch.project.dto.admin.BlackListDTO">
		DELETE FROM black_list WHERE id =#{id}
	</delete>
	
	<select id="checkIfReported" resultMap="blackList">
		SELECT * FROM black_list WHERE id=#{commentIdPlusUserEmail}
	</select>
	
	<select id="getBlackListDTO" resultMap="blackListWaiting">
		SELECT author_email, COUNT(reported_comment_id) AS reported_comment_amount FROM black_list WHERE is_black=0 GROUP BY author_email
	</select>
	
	<select id="getCurrentPageList" resultMap="blackListWaiting">
		SELECT row_num, author_email, reported_comment_amount
		FROM (
   			SELECT author_email, COUNT(reported_comment_id) AS reported_comment_amount, ROW_NUMBER() OVER (ORDER BY COUNT(reported_comment_id) DESC) AS row_num
   			FROM black_list WHERE is_black=#{isBlack} GROUP BY author_email
		)
		WHERE 
		row_num BETWEEN #{startRow} AND #{endRow} 
		AND
		row_num &lt;= #{totalRows}
	</select>
	
	<select id="getReportedCommentIds" resultType="String">
		SELECT reported_comment_id FROM black_list WHERE author_email=#{email} group by reported_comment_id
	</select>
	
	<select id="getReportedCommentDatas" resultMap="reportedComments">
		SELECT reported_comment, movie_nm, comment_written_date, review_score, movie_id, reported_amount
		FROM (
    		SELECT movie_nm, reported_comment, comment_written_date, review_score, movie_id, COUNT(reported_comment_id) AS reported_amount
    		FROM black_list 
    		WHERE reported_comment_id =#{commentId}
    		GROUP BY reported_comment_id, movie_nm, reported_comment, comment_written_date, review_score, movie_id
		)
	</select>
	
	<select id="getBlackListDtoForModal" resultMap="blackList">
		SELECT * FROM black_list WHERE reported_comment_id=#{commentId}
	</select>
	
	<delete id="deleteReportedCommentDataFormAdmin" parameterType="String">
		DELETE FROM black_list WHERE reported_comment_id=#{commentId}
	</delete>
	
	<update id="updateToBlack4BlackList" parameterType="String">
		UPDATE black_list SET is_black = 1 WHERE author_email=#{email}
	</update>
	
	<update id="updateToBlack4MovieReview" parameterType="String">
		UPDATE movie_review SET is_black = 1 WHERE user_email=#{email}
	</update>
	
	<select id="getBlackList" resultMap="blackListWaiting">
		SELECT author_email, COUNT(reported_comment_id) AS reported_comment_amount FROM black_list WHERE is_black=1 GROUP BY author_email
	</select>
	
	<select id="getCurrentPageList4Black" resultMap="blackListWaiting">
		SELECT row_num, author_email, reported_comment_amount
		FROM (
   			SELECT author_email, COUNT(reported_comment_id) AS reported_comment_amount, ROW_NUMBER() OVER (ORDER BY COUNT(reported_comment_id) DESC) AS row_num
   			FROM black_list WHERE is_black=1 GROUP BY author_email
		)
		WHERE 
		row_num BETWEEN #{startRow} AND #{endRow} 
		AND
		row_num &lt;= #{totalRows}
	</select>
	
	<update id="updateToWait4BlackList" parameterType="String">
		UPDATE black_list SET is_black = 0 WHERE author_email=#{email}
	</update>
	
	<update id="updateToWait4MovieReview" parameterType="String">
		UPDATE movie_review SET is_black = 0 WHERE user_email=#{email}
	</update>
	
	<update id="updateToBlack4MemberInfo" parameterType="String">
		UPDATE member_info SET is_black=1 WHERE user_email=#{email}
	</update>
	
	<select id="checkIfBlack" resultType="Integer">
		SELECT is_black FROM member_info WHERE user_email=#{email}
	</select>
	
	<update id="updateToWait4MemberInfo" parameterType="String">
		UPDATE member_info SET is_black=0 WHERE user_email=#{email}
	</update>
	
	<insert id="insertNotification" parameterType="com.watch.project.dto.admin.UserNotificationDTO">
		INSERT INTO user_notification VALUES(#{recieverEmail}, #{recieverName}, #{senderEmail}, #{senderName}, #{notificationContent}, #{insertedDate}, #{isSeen})
	</insert>
	
	<select id="getUserNotificationDtoByEmail" resultMap="notify">
		SELECT * FROM user_notification WHERE reciever_email=#{userEmail} AND is_seen=0
	</select>
</mapper>