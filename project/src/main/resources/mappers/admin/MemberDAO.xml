<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.watch.project.repository.admin.AdminMemberRepository">
	<resultMap type="com.watch.project.dto.admin.MemberDTO" id="member">
		<result column="num" property="num" />
		<result column="id" property="id" />
		<result column="user_email" property="userEmail" />
		<result column="user_pw" property="userPw" />
		<result column="user_name" property="userName" />
		<result column="kakao_agreement" property="kakaoAgreement" />
		<result column="naver_agreement" property="naverAgreement" />
		<result column="google_agreement" property="googleAgreement" />
	</resultMap>
	
	<resultMap type="com.watch.project.dto.admin.BlackListDTO" id="blackList">
		<id property="id" column="id"/>
		<result property="reportedCommentId" column="reported_comment_id"/>
		<result property="reportedComment" column="reported_comment"/>
		<result property="authorEmail" column="author_email"/>
		<result property="reporterEmail" column="reporter_email"/>
		<result property="reasonForReport" column="reason_for_report"/>
		<result property="reportedDate" column="reported_date"/>
	</resultMap>
	
	<resultMap type="com.watch.project.dto.admin.BlackListWaitingDTO" id="blackListWaiting">
		<result property="rowNum" column="row_num"/>
		<result property="authorEmail" column="author_email"/>
		<result property="reportedCommentAmount" column="reported_comment_amount"/>
	</resultMap>
	
	<select id="getMemberInfoListByStartAndEnd" resultMap="member">
		<![CDATA[SELECT * FROM 
		(SELECT ROWNUM AS num, ${columns}
		FROM (SELECT * FROM ${tableNm} ORDER BY ${orderByColumn} DESC))
		WHERE num >= ${start} AND num <= ${end}]]>
	</select>
	
	<select id="getMemberInfoListByStartAndEndQuery" resultMap="member">
		<![CDATA[SELECT * FROM 
		(SELECT ROWNUM AS num, ${columns}
		FROM (SELECT * FROM ${tableNm} WHERE ${conditionColumn} ORDER BY ${orderByColumn} DESC))
		WHERE num >= ${start} AND num <= ${end}]]>
	</select>	
	
	<delete id="deleteMember" parameterType="String">
		DELETE FROM member_info WHERE user_email =#{userEmail}
	</delete>
	
	<select id="checkIfExist" resultMap="blackList">
		SELECT * FROM black_list WHERE id=#{id}
	</select>
	
	<insert id="saveReportDatas" parameterType="com.watch.project.dto.admin.BlackListDTO">
		INSERT INTO black_list VALUES(#{id}, #{reportedCommentId}, #{reportedComment}, #{authorEmail}, #{reporterEmail}, #{reasonForReport}, #{reportedDate})
	</insert>
	
	<update id="updateReportDatas" parameterType="com.watch.project.dto.admin.BlackListDTO">
		UPDATE black_list SET reason_for_report =#{reasonForReport}, reported_date =#{reportedDate} WHERE id=#{id}
	</update>
	
	<delete id="deleteReportedDatas" parameterType="com.watch.project.dto.admin.BlackListDTO">
		DELETE FROM black_list WHERE id =#{id}
	</delete>
	
	<select id="checkIfReported" resultMap="blackList">
		SELECT * FROM black_list WHERE id=#{commentIdPlusUserEmail}
	</select>
	
	<select id="getBlackListDTO" resultMap="blackListWaiting">
		SELECT author_email, COUNT(reported_comment_id) AS reported_comment_amount FROM black_list GROUP BY author_email
	</select>
	
	<select id="getCurrentPageList" resultMap="blackListWaiting">
		SELECT row_num, author_email, reported_comment_amount
			FROM (
    			SELECT author_email, COUNT(reported_comment_id) AS reported_comment_amount, ROW_NUMBER() OVER (ORDER BY COUNT(reported_comment_id) DESC) AS row_num
    				FROM black_list GROUP BY author_email
			)
			WHERE row_num BETWEEN #{startRow} AND #{endRow} AND row_num &lt;= #{totalRows}

	</select>
</mapper>